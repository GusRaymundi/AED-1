//▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
//▐ Trabalho AED 1                                                 ▌
//▐ Gustavo Raymundi Nygaard                                       ▌
//▐ ============================================================== ▌
//▐ Agenda pBuffer                                                 ▌
//▐▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void **pBuffer; // buffer principal que armazenará todas as informações

//▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
//▐  resize()													                            ▌
//▐																                                ▌
//▐ Redimensiona o buffer de memória para suportar mais registros ▌
//▐▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌

void resize() {
    pBuffer[2] = (size_t)pBuffer[2] * 2; // Dobra o espaço alocado
    pBuffer = realloc(pBuffer, sizeof(void*) * (int)pBuffer[2]);
    if (!pBuffer) {
        printf("\nErro ao realocar memoria!\n");
        exit(1);
    }
}

//▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
//▐  push()												                            	▌
//▐														                              		▌
//▐ Insere uma nova pessoa na agenda de forma ordenada	      	▌
//▐▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌

void push() {
    // Verifica se há espaço para a inserção de mais pessoas
    if (pBuffer[1] >= (size_t)pBuffer[2] - 3) {
        resize(); // Caso não haja espaço, dobra o buffer
    }

    char *nome = malloc(sizeof(char) * 1024);
    char *email = malloc(sizeof(char) * 1024);
    if (!nome || !email) {
        printf("\nErro ao alocar memoria para os dados da pessoa!\n");
        exit(1);
    }

    printf("\nNome: ");
    scanf("\n%[^\n]s", nome);
    
    printf("Idade: ");
    int idade;
    scanf("%d", &idade);
    
    printf("Email: ");
    scanf("%s", email);
    
    // Insere de forma ordenada
    size_t pos = 0;
    while (pos < (size_t)pBuffer[1] && strcmp((char*)pBuffer[6 + pos * 3], nome) < 0) {
        pos++;
    }

    // Move os registros existentes para a direita para abrir espaço
    for (size_t i = pBuffer[1]; i > pos; i--) {
        pBuffer[6 + i * 3] = pBuffer[6 + (i - 1) * 3];
        pBuffer[6 + i * 3 + 1] = pBuffer[6 + (i - 1) * 3 + 1];
        pBuffer[6 + i * 3 + 2] = pBuffer[6 + (i - 1) * 3 + 2];
    }

    // Atribui os novos valores
    pBuffer[6 + pos * 3] = nome;
    pBuffer[6 + pos * 3 + 1] = (void*) (long) idade;
    pBuffer[6 + pos * 3 + 2] = email;
    
    pBuffer[1]++; // Incrementa a quantidade de pessoas
}

//▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
//▐  findAll()												                        	▌
//▐														                              		▌
//▐ Mostra todas as pessoas na agenda							              ▌
//▐▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌

void findAll() {
    printf("\nAqui estao todos os %d registros salvos na agenda:\n", (int)pBuffer[1]);
    for (size_t i = 0; i < pBuffer[1]; i++) {
        printf("===================================");
        printf("\nNome: %s\nIdade: %d\nEmail: %s\n", (char*)pBuffer[6 + i * 3], (int)(long)pBuffer[6 + i * 3 + 1], (char*)pBuffer[6 + i * 3 + 2]);
    }
}

//▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
//▐  findByPos()											                        	▌
//▐															                              	▌
//▐ Encontra e exibe uma pessoa pela posição			              ▌
//▐▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌

void findByPos() {
    if (pBuffer[1] == 0) {
        printf("\nA lista esta vazia.\n");
        return;
    }
    
    size_t pos;
    printf("\nDigite a posicao da pessoa: ");
    scanf("%zu", &pos);
    
    if (pos < pBuffer[1]) {
        printf("\nNome: %s\nIdade: %d\nEmail: %s\n\n", (char*)pBuffer[6 + pos * 3], (int)(long)pBuffer[6 + pos * 3 + 1], (char*)pBuffer[6 + pos * 3 + 2]);
    } else {
        printf("\nPosicao invalida.\n");
    }
}

//▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
//▐  findByNome()											                        	▌
//▐																                              ▌
//▐ Encontra e exibe uma pessoa pelo nome		  			          	▌
//▐▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌

void findByNome() {
    if (pBuffer[1] == 0) {
        printf("\nA lista esta vazia.\n");
        return;
    }

    char nome[1024];
    printf("\nDigite o nome da pessoa: ");
    scanf("\n%[^\n]s", nome);

    for (size_t i = 0; i < pBuffer[1]; i++) {
        if (strcmp((char*)pBuffer[6 + i * 3], nome) == 0) {
            printf("\nPosicao: %zu\nNome: %s\nIdade: %d\nEmail: %s\n\n", i, (char*)pBuffer[6 + i * 3], (int)(long)pBuffer[6 + i * 3 + 1], (char*)pBuffer[6 + i * 3 + 2]);
            return;
        }
    }

    printf("\nPessoa chamada %s nao encontrada.\n", nome);
}

//▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
//▐  pop()													                          	▌
//▐															                              	▌
//▐ Remove uma pessoa pela posição	 		    			            	▌
//▐▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌

void pop() {
    if (pBuffer[1] == 0) {
        printf("\nA lista esta vazia.\n");
        return;
    }

    size_t pos;
    printf("\nQual posicao deseja remover? ");
    scanf("%zu", &pos);

    if (pos >= pBuffer[1]) {
        printf("\nPosicao invalida.\n");
        return;
    }

    free(pBuffer[6 + pos * 3]); // Libera o nome
    free(pBuffer[6 + pos * 3 + 2]); // Libera o email

    // Move os registros seguintes para preencher a lacuna
    for (size_t i = pos; i < pBuffer[1] - 1; i++) {
        pBuffer[6 + i * 3] = pBuffer[6 + (i + 1) * 3];
        pBuffer[6 + i * 3 + 1] = pBuffer[6 + (i + 1) * 3 + 1];
        pBuffer[6 + i * 3 + 2] = pBuffer[6 + (i + 1) * 3 + 2];
    }

    pBuffer[1]--; // Decrementa a quantidade de pessoas
}

//▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
//▐  popByNome()											                         	▌
//▐																                              ▌
//▐ Remove uma pessoa pelo nome 	 		    			              	▌
//▐▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌

void popByNome() { 
    if (pBuffer[1] == 0) {
        printf("\nA lista esta vazia.\n");
        return;
    }

    char nome[1024];
    printf("\nDigite o nome da pessoa: ");
    scanf("\n%[^\n]s", nome);

    for (size_t i = 0; i < pBuffer[1]; i++) {
        // Verifica se o nome no buffer é igual ao nome procurado
        if (strcmp((char*)pBuffer[6 + i * 3], nome) == 0) {
            // Libera a memória dos campos: nome e email
            free(pBuffer[6 + i * 3]); // Libera o nome
            free(pBuffer[6 + i * 3 + 2]); // Libera o email

            // Move os registros seguintes para preencher a lacuna
            for (size_t j = i; j < pBuffer[1] - 1; j++) {
                pBuffer[6 + j * 3] = pBuffer[6 + (j + 1) * 3];
                pBuffer[6 + j * 3 + 1] = pBuffer[6 + (j + 1) * 3 + 1];
                pBuffer[6 + j * 3 + 2] = pBuffer[6 + (j + 1) * 3 + 2];
            }

            pBuffer[1]--; // Decrementa a quantidade de pessoas 
            printf("\nPessoa chamada %s foi removida.\n", nome);
            return;
        }
    }

    // Caso o nome não tenha sido encontrado
    printf("\nPessoa chamada %s nao encontrada.\n", nome);
}

//▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
//▐  killMallocs()											                      	▌
//▐															                              	▌
//▐ Libera toda a memória alocada	 		    		              		▌
//▐▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌

void killMallocs() {
    for (size_t i = 0; i < pBuffer[1]; i++) {
        free(pBuffer[6 + i * 3]);
        free(pBuffer[6 + i * 3 + 2]);
    }
}

int main() {
    pBuffer = malloc(sizeof(void *) * 36); // Aloca espaço para 36 ponteiros inicialmente
    pBuffer[1] = 0; // Contador de pessoas
    pBuffer[2] = 36; // Tamanho do buffer
    pBuffer[3] = 6;  // Espaço reservado para variáveis internas

    while (1) {
        printf("\nDigite operação:\n1- Adicionar Pessoa (Nome, Idade, Email)\n2- Remover Pessoa\n3- Buscar Pessoa\n4- Listar todos\n5- Sair\n");
        scanf("%d", &pBuffer[0]);

        switch ((int)pBuffer[0]) {
        case 1:
            push();
            break;
        case 2:
            printf("\nDeseja remover por posição (1) ou por nome (2)? ");
            int escolha;
            scanf("%d", &escolha);
            if (escolha == 1) {
                pop();
            } else {
                popByNome();  // Chama a remoção por nome
            }
            break;
        case 3:
            pBuffer[5] = NULL;
            printf("Deseja buscar por posição (1) ou por nome (2)?\n");
            do {
                scanf("%d", &pBuffer[5]);
            } while (pBuffer[5] != 1 && pBuffer[5] != 2);
            if (pBuffer[5] == 1) {
                findByPos();
            } else {
                findByNome();
            }
            break;
        case 4:
            findAll();
            break;
        case 5:
            killMallocs();
            free(pBuffer);
            return 0;
        default:
            printf("Digite um valor de entrada válido\n");
            break;
        }
    }

    return 1;
}
